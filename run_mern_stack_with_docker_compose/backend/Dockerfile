



# Stage 1: Build the Node.js backend app
FROM node:18-alpine3.20 AS build



# Set the working directory inside the container
WORKDIR /app



# ðŸš« ERROR 1: Copy non-existent file to trigger COPY failure
COPY package.json package-lock.json yarn.lock ./
# â†’ If you donâ€™t have yarn.lock, this will fail if Docker strict COPY is enforced
# â†’ Also, if package-lock.json doesnâ€™t exist, this fails too



# ðŸš« ERROR 2: Run invalid shell command before install
RUN ech "ðŸ’¥ This command is misspelled on purpose!" && exit 1
# â†’ 'ech' instead of 'echo' â†’ command not found â†’ build fails



# Install dependencies â€” will never reach here due to above error
RUN npm install



# ðŸš« ERROR 3: Copy from invalid source (non-existent directory)
COPY ./src-invalid ./src
# â†’ If you donâ€™t have a folder called "src-invalid", this fails



# ðŸš« ERROR 4: Use invalid Dockerfile syntax â€” malformed ARG
ARG PORT==3000
# â†’ Double equals is invalid syntax â†’ Docker build parser will choke here



# Expose the port â€” may never reach here
EXPOSE 3000



# Define the build-time arguments with default values
ARG DB_HOST
ARG DB_USER
ARG DB_PASSWORD
ARG DB_DATABASE
ARG DB_TABLENAME="users"
ARG DB_WAITFORCONNECTIONS=true
ARG DB_CONNECTIONLIMIT=10
ARG DB_QUEUELIMIT=0



# ðŸš« ERROR 5: Invalid ENV assignment (using := instead of =)
ENV PORT:=$PORT
# â†’ Docker doesnâ€™t support := syntax â†’ parse error



# Pass ARG values to ENV so they are accessible during runtime
ENV DB_HOST=$DB_HOST
ENV DB_USER=$DB_USER
ENV DB_PASSWORD=$DB_PASSWORD
ENV DB_DATABASE=$DB_DATABASE
ENV DB_TABLENAME=$DB_TABLENAME
ENV DB_WAITFORCONNECTIONS=$DB_WAITFORCONNECTIONS
ENV DB_CONNECTIONLIMIT=$DB_CONNECTIONLIMIT
ENV DB_QUEUELIMIT=$DB_QUEUELIMIT



# ðŸš« ERROR 6: Reference undefined ARG/ENV in CMD (but this wonâ€™t fail build, so we add a RUN to force fail)
RUN if [ -z "$DB_HOST" ]; then echo "ðŸ’¥ DB_HOST is required but not set!" >&2; exit 1; fi
# â†’ Fails build if DB_HOST is not passed via --build-arg



# ðŸš« ERROR 7: Use non-existent npm script
CMD ["npm", "run", "start-server-now"]
# â†’ This wonâ€™t fail during BUILD, but if you want build failure, combine with:
# RUN npm run start-server-now
# â†’ Uncomment below to make it fail at build time:



# RUN npm run start-server-now
# â†’ Fails if script doesnâ€™t exist in package.json




